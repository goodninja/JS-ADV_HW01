/*
###Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся 
на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
Необходимо реализовать функцию newOrder. Создавать вспомогательные функции, 
коллекции, не запрещается. Старайтесь использовать коллекции Map/Set, где это 
актуально. Представленный ниже код должен работать.

Повара и их специализации:
Олег - специализация: Пицца.
Андрей - специализация: Суши.
Анна - специализация: Десерты.


Блюда, которые могут заказать посетители:
Пицца "Маргарита"
Пицца "Пепперони"
Пицца "Три сыра"
Суши "Филадельфия"
Суши "Калифорния"
Суши "Чизмаки"
Суши "Сеякемаки"
Десерт Тирамису
Десерт Чизкейк
*/

// Создаём коллекцию Мар с распределением специализации по поварам
const chefs = new Map();
chefs.set("Пицца", "Олег");
chefs.set("Суши", "Андрей");
chefs.set("Десерт", "Анна");

// Через коллекцию Set создаём список доступных для заказа блюд
const dishes = new Set();
dishes.add("Маргарита");
dishes.add("Пепперони");
dishes.add("Три сыра");
dishes.add("Филадельфия");
dishes.add("Калифорния");
dishes.add("Чизмаки");
dishes.add("Сеякемаки");
dishes.add("Тирамису");
dishes.add("Чизкейк");

// Класс - посетитель ресторана
class Client {
  constructor(firstname, lastname) {
    this.firstname = firstname;
    this.lastname = lastname;
  }
}

let clientOrder = [];

// Вам необходимо реализовать класс, который управляет заказами и поварами.
class Manager {
  newOrder(client, ...orders) {
    clientOrder.push({ name: client, order: orders });
    console.log(clientOrder);

    let toggle = true;
    for (const order of orders) {
      if (!dishes.has(order.name)) {
        toggle = false;
        throw `${order.type} "${order.name}" - такого блюда не существует.`;
      }

      if (toggle) {
        console.log(
          `${order.type} "${order.name}" - ${
            order.quantity
          }; готовит повар ${chefs.get(order.type)}`
        );
      }
    }
  }
}

// Можно передать внутрь конструктора что-либо, если необходимо.
const manager = new Manager();

// Вызовы ниже должны работать верно, менять их нельзя, удалять тоже.

console.log("Заказ 1");
manager.newOrder(
  new Client("Иван", "Иванов"),
  { name: "Маргарита", quantity: 1, type: "Пицца" },
  { name: "Пепперони", quantity: 2, type: "Пицца" },
  { name: "Чизкейк", quantity: 1, type: "Десерт" }
);
// Вывод:
// Клиент Иван заказал:
// Пицца "Маргарита" - 1; готовит повар Олег
// Пицца "Пепперони" - 2; готовит повар Олег
// Десерт "Чизкейк" - 1; готовит повар Анна

// ---

console.log("Заказ 2");
const clientPavel = new Client("Павел", "Павлов");
manager.newOrder(
  clientPavel,
  { name: "Филадельфия", quantity: 5, type: "Суши" },
  { name: "Калифорния", quantity: 3, type: "Суши" }
);
// Вывод:
// Клиент Павел заказал:
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 3; готовит повар Андрей

console.log("Заказ 3");
manager.newOrder(
  clientPavel,
  { name: "Калифорния", quantity: 1, type: "Суши" },
  { name: "Тирамису", quantity: 2, type: "Десерт" }
);
// Вывод:
// Клиент Павел заказал:
// Суши "Филадельфия" - 5; готовит повар Андрей
// Суши "Калифорния" - 4; готовит повар Андрей
// Десерт "Тирамису" - 2; готовит повар Анна

console.log("Заказ 4");
manager.newOrder(
  clientPavel,
  { name: "Филадельфия", quantity: 1, type: "Суши" },
  { name: "Трубочка с вареной сгущенкой", quantity: 1, type: "Десерт" }
);
// Ничего не должно быть добавлено, должна быть выброшена ошибка:
// Десерт "Трубочка с вареной сгущенкой" - такого блюда не существует.
